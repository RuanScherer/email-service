// Code generated by MockGen. DO NOT EDIT.
// Source: appConsumer.go
//
// Generated by this command:
//
//	mockgen -source=appConsumer.go -destination=appConsumer_mock.go -package kafka
//

// Package kafka is a generated GoMock package.
package kafka

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAppConsumer is a mock of AppConsumer interface.
type MockAppConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockAppConsumerMockRecorder
}

// MockAppConsumerMockRecorder is the mock recorder for MockAppConsumer.
type MockAppConsumerMockRecorder struct {
	mock *MockAppConsumer
}

// NewMockAppConsumer creates a new mock instance.
func NewMockAppConsumer(ctrl *gomock.Controller) *MockAppConsumer {
	mock := &MockAppConsumer{ctrl: ctrl}
	mock.recorder = &MockAppConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppConsumer) EXPECT() *MockAppConsumerMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockAppConsumer) Subscribe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockAppConsumerMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAppConsumer)(nil).Subscribe))
}

// Unsubscribe mocks base method.
func (m *MockAppConsumer) Unsubscribe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockAppConsumerMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockAppConsumer)(nil).Unsubscribe))
}
