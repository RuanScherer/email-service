// Code generated by MockGen. DO NOT EDIT.
// Source: sendEmail.go
//
// Generated by this command:
//
//	mockgen -source=sendEmail.go -destination=sendEmail_mock.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	model "github.com/RuanScherer/email-service/application/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSendEmailUseCase is a mock of SendEmailUseCase interface.
type MockSendEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSendEmailUseCaseMockRecorder
}

// MockSendEmailUseCaseMockRecorder is the mock recorder for MockSendEmailUseCase.
type MockSendEmailUseCaseMockRecorder struct {
	mock *MockSendEmailUseCase
}

// NewMockSendEmailUseCase creates a new mock instance.
func NewMockSendEmailUseCase(ctrl *gomock.Controller) *MockSendEmailUseCase {
	mock := &MockSendEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockSendEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendEmailUseCase) EXPECT() *MockSendEmailUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSendEmailUseCase) Execute(req model.SendEmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSendEmailUseCaseMockRecorder) Execute(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendEmailUseCase)(nil).Execute), req)
}
